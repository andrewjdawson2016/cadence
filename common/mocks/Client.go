// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import blobstore "github.com/uber/cadence/common/blobstore"
import context "context"
import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// BucketMetadata provides a mock function with given fields: ctx, bucket
func (_m *Client) BucketMetadata(ctx context.Context, bucket string) (*blobstore.BucketMetadataResponse, error) {
	ret := _m.Called(ctx, bucket)

	var r0 *blobstore.BucketMetadataResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *blobstore.BucketMetadataResponse); ok {
		r0 = rf(ctx, bucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blobstore.BucketMetadataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadBlob provides a mock function with given fields: ctx, bucket, path
func (_m *Client) DownloadBlob(ctx context.Context, bucket string, path string) (*blobstore.Blob, error) {
	ret := _m.Called(ctx, bucket, path)

	var r0 *blobstore.Blob
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *blobstore.Blob); ok {
		r0 = rf(ctx, bucket, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blobstore.Blob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadBlob provides a mock function with given fields: ctx, bucket, path, blob
func (_m *Client) UploadBlob(ctx context.Context, bucket string, path string, blob *blobstore.Blob) error {
	ret := _m.Called(ctx, bucket, path, blob)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *blobstore.Blob) error); ok {
		r0 = rf(ctx, bucket, path, blob)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
